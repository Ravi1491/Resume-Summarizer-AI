name: Docker Image CI

on:
  push:
    branches: ["main", "beta"]
  pull_request:
    branches: ["main", "beta"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'beta' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ ${{ github.ref }} == 'refs/heads/beta' ]]; then
            echo "ENVIRONMENT=beta" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          fi

      - name: Login Dockerhub
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_PASSWORD: ${{secrets.DOCKERHUB_PASSWORD}}
        run: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

      - name: Build the Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_IMAGE }}:${{ env.ENVIRONMENT }} .

      - name: Push to Dockerhub
        run: docker push ${{secrets.DOCKERHUB_IMAGE}}:${{ env.ENVIRONMENT }}

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Deploy to Lightsail
        env:
          SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          IMAGE_NAME: ${{secrets.DOCKERHUB_IMAGE}}:${{ env.ENVIRONMENT }}
          CONTAINER_PORT: 5000
        run: |
          ENV_VARS=$(yq eval ".${{ env.ENVIRONMENT }} | to_entries | map(.key + \"=\" + .value) | join(\",\")" .github/env.yaml)
          aws lightsail create-container-service-deployment \
            --service-name $SERVICE_NAME \
            --containers "{\"$CONTAINER_NAME\":{\"image\":\"$IMAGE_NAME\",\"ports\":{\"5000\":\"HTTP\"},\"environment\":[$(echo $ENV_VARS | sed 's/,/","/g' | sed 's/=/":"/g')]}}" \
            --public-endpoint "{\"containerName\":\"$CONTAINER_NAME\",\"containerPort\":5000,\"healthCheck\":{\"healthyThreshold\":2,\"unhealthyThreshold\":2,\"timeoutSeconds\":2,\"intervalSeconds\":5,\"path\":\"health\",\"successCodes\":\"200-499\"}}"

  check-deployment:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'beta' }}

    steps:
      - name: Set environment
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ ${{ github.ref }} == 'refs/heads/beta' ]]; then
            echo "ENVIRONMENT=beta" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check Deployment Status
        env:
          SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
        run: |
          echo "Checking deployment status..."
          while true; do
            DEPLOYMENT_STATE=$(aws lightsail get-container-services --service-name $SERVICE_NAME --query 'containerServices[0].currentDeployment.state' --output text)
            CONTAINER_STATE=$(aws lightsail get-container-services --service-name $SERVICE_NAME --query 'containerServices[0].state' --output text)
            echo "Current deployment state: $DEPLOYMENT_STATE"
            echo "Current container service state: $CONTAINER_STATE"
            if [ "$DEPLOYMENT_STATE" = "ACTIVE" ] && [ "$CONTAINER_STATE" = "RUNNING" ]; then
              echo "Deployment successful and service is running!"
              break
            elif [ "$DEPLOYMENT_STATE" = "FAILED" ] || [ "$CONTAINER_STATE" = "FAILED" ]; then
              echo "Deployment failed. Check Lightsail logs for more information."
              exit 1
            fi
            echo "Waiting for deployment to complete..."
            sleep 30
          done
