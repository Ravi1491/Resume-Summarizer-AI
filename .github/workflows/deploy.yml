name: Deploy Application

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose deployment environment'
        required: true
        type: choice
        options:
          - beta
          - production

jobs:
  deploy_beta:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'beta'
    runs-on: ubuntu-latest
    environment: beta
    
    steps:
      - uses: actions/checkout@v4

      - name: Login Dockerhub
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_PASSWORD: ${{secrets.DOCKERHUB_PASSWORD}}
        run: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

      - name: Build the Docker image
        run: |
          docker build -t ${{secrets.DOCKERHUB_USERNAME}}/resume-be-beta .

      - name: Push to Dockerhub
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/resume-be-beta:latest

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Load environment variables
        id: load-env
        run: |
          echo "Loading beta environment variables from env.yaml"
          # Convert YAML to JSON and process environment variables
          ENV_VARS=$(yq eval -o=json '.beta' .github/env.yaml)
          echo "env_vars<<EOF" >> $GITHUB_OUTPUT
          echo "$ENV_VARS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy to Lightsail Beta
        env:
          SERVICE_NAME: ${{secrets.LIGHTSAIL_SERVICE_NAME_BETA}}
          CONTAINER_NAME: ${{secrets.CONTAINER_NAME_BETA}}
          IMAGE_NAME: ${{secrets.DOCKERHUB_USERNAME}}/resume-be-beta
          CONTAINER_PORT: 5000
          ENV_VARS: ${{ steps.load-env.outputs.env_vars }}
        run: |
          aws lightsail create-container-service-deployment \
            --service-name $SERVICE_NAME \
            --containers "{\"$CONTAINER_NAME\":{\"image\":\"$IMAGE_NAME:latest\",\"ports\":{\"5000\":\"HTTP\"},\"environment\":$ENV_VARS}}" \
            --public-endpoint "{\"containerName\":\"$CONTAINER_NAME\",\"containerPort\":5000,\"healthCheck\":{\"healthyThreshold\":2,\"unhealthyThreshold\":2,\"timeoutSeconds\":2,\"intervalSeconds\":5,\"path\":\"health\",\"successCodes\":\"200-499\"}}"

      - name: Check Beta Deployment Status
        env:
          SERVICE_NAME: ${{secrets.LIGHTSAIL_SERVICE_NAME_BETA}}
        run: |
          echo "Checking deployment status..."
          while true; do
            DEPLOYMENT_STATE=$(aws lightsail get-container-services --service-name $SERVICE_NAME --query 'containerServices[0].currentDeployment.state' --output text)
            CONTAINER_STATE=$(aws lightsail get-container-services --service-name $SERVICE_NAME --query 'containerServices[0].state' --output text)
            echo "Current deployment state: $DEPLOYMENT_STATE"
            echo "Current container service state: $CONTAINER_STATE"
            if [ "$DEPLOYMENT_STATE" = "ACTIVE" ] && [ "$CONTAINER_STATE" = "RUNNING" ]; then
              echo "Beta Deployment successful and service is running!"
              break
            elif [ "$DEPLOYMENT_STATE" = "FAILED" ] || [ "$CONTAINER_STATE" = "FAILED" ]; then
              echo "Beta Deployment failed. Check Lightsail logs for more information."
              exit 1
            fi
            echo "Waiting for deployment to complete..."
            sleep 30
          done
          
  deploy_production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4

      - name: Login Dockerhub
        env:
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKERHUB_PASSWORD: ${{secrets.DOCKERHUB_PASSWORD}}
        run: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

      - name: Build the Docker image
        run: |
          docker build -t ${{secrets.DOCKERHUB_USERNAME}}/resume-be-prod .

      - name: Push to Dockerhub
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/resume-be-prod:latest

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Load environment variables
        id: load-env
        run: |
          echo "Loading production environment variables from env.yaml"
          # Convert YAML to JSON and process environment variables
          ENV_VARS=$(yq eval -o=json '.production' .github/env.yaml)
          echo "env_vars<<EOF" >> $GITHUB_OUTPUT
          echo "$ENV_VARS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy to Lightsail Production
        env:
          SERVICE_NAME: ${{secrets.LIGHTSAIL_SERVICE_NAME_PROD}}
          CONTAINER_NAME: ${{secrets.CONTAINER_NAME_PROD}}
          IMAGE_NAME: ${{secrets.DOCKERHUB_USERNAME}}/resume-be-prod
          CONTAINER_PORT: 5000
          ENV_VARS: ${{ steps.load-env.outputs.env_vars }}
        run: |
          aws lightsail create-container-service-deployment \
            --service-name $SERVICE_NAME \
            --containers "{\"$CONTAINER_NAME\":{\"image\":\"$IMAGE_NAME:latest\",\"ports\":{\"5000\":\"HTTP\"},\"environment\":$ENV_VARS}}" \
            --public-endpoint "{\"containerName\":\"$CONTAINER_NAME\",\"containerPort\":5000,\"healthCheck\":{\"healthyThreshold\":2,\"unhealthyThreshold\":2,\"timeoutSeconds\":2,\"intervalSeconds\":5,\"path\":\"/\",\"successCodes\":\"200-499\"}}"

      - name: Check Production Deployment Status
        env:
          SERVICE_NAME: ${{secrets.LIGHTSAIL_SERVICE_NAME_PROD}}
        run: |
          echo "Checking deployment status..."
          while true; do
            DEPLOYMENT_STATE=$(aws lightsail get-container-services --service-name $SERVICE_NAME --query 'containerServices[0].currentDeployment.state' --output text)
            CONTAINER_STATE=$(aws lightsail get-container-services --service-name $SERVICE_NAME --query 'containerServices[0].state' --output text)
            echo "Current deployment state: $DEPLOYMENT_STATE"
            echo "Current container service state: $CONTAINER_STATE"
            if [ "$DEPLOYMENT_STATE" = "ACTIVE" ] && [ "$CONTAINER_STATE" = "RUNNING" ]; then
              echo "Production Deployment successful and service is running!"
              break
            elif [ "$DEPLOYMENT_STATE" = "FAILED" ] || [ "$CONTAINER_STATE" = "FAILED" ]; then
              echo "Production Deployment failed. Check Lightsail logs for more information."
              exit 1
            fi
            echo "Waiting for deployment to complete..."
            sleep 30
          done
